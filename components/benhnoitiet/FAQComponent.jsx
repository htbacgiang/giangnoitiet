"use client";

import React, { useState, useMemo, useEffect } from "react";
import Image from "next/image";
import { ChevronDown, ExternalLink } from "lucide-react";

const FAQComponent = () => {
  const [expanded, setExpanded] = useState(null);
  const [selectedMedia, setSelectedMedia] = useState(0);
  const [isVideoPlaying, setIsVideoPlaying] = useState(false);
  const [hasVideoStarted, setHasVideoStarted] = useState(false);
  const [isMuted, setIsMuted] = useState(true); // B·∫Øt ƒë·∫ßu v·ªõi muted ƒë·ªÉ autoplay ƒë∆∞·ª£c ph√©p
  const [audioEnabled, setAudioEnabled] = useState(false); // Track if audio context is enabled

  // Force autoplay with user interaction
  const handleVideoInteraction = () => {
    try {
      // T·∫°o m·ªôt user interaction ƒë·ªÉ enable autoplay v·ªõi audio
      const audioContext = new (window.AudioContext || window.webkitAudioContext)();
      
      // Resume audio context n·∫øu b·ªã suspend
      if (audioContext.state === 'suspended') {
        audioContext.resume();
      }
      
      const oscillator = audioContext.createOscillator();
      const gainNode = audioContext.createGain();
      
      oscillator.connect(gainNode);
      gainNode.connect(audioContext.destination);
      
      // T·∫°o √¢m thanh r·∫•t nh·ªè ƒë·ªÉ k√≠ch ho·∫°t audio context
      gainNode.gain.setValueAtTime(0.001, audioContext.currentTime);
      oscillator.frequency.setValueAtTime(440, audioContext.currentTime);
      oscillator.start();
      oscillator.stop(audioContext.currentTime + 0.05);
      
      // Set flag ƒë·ªÉ cho bi·∫øt user ƒë√£ t∆∞∆°ng t√°c
      window.userHasInteracted = true;
    } catch (error) {
      console.log('Audio context error:', error);
      window.userHasInteracted = true;
    }
  };

  // Load Facebook SDK
  useEffect(() => {
    if (typeof window !== 'undefined' && !window.FB) {
      const script = document.createElement('script');
      script.src = 'https://connect.facebook.net/vi_VN/sdk.js#xfbml=1&version=v18.0';
      script.async = true;
      script.defer = true;
      script.crossOrigin = 'anonymous';
      document.body.appendChild(script);
      
      script.onload = () => {
        if (window.FB) {
          window.FB.init({
            appId: 'your-app-id', // C√≥ th·ªÉ ƒë·ªÉ tr·ªëng n·∫øu kh√¥ng c·∫ßn
            version: 'v18.0'
          });
        }
      };
    }
  }, []);

  // Setup user interaction handlers for audio autoplay
  useEffect(() => {
    const enableAudioAutoplay = () => {
      handleVideoInteraction();
      setAudioEnabled(true);
      
      // T·ª± ƒë·ªông unmute video sau khi c√≥ user interaction
      setTimeout(() => {
        if (hasVideoStarted) {
          setIsMuted(false);
        }
      }, 1000); // Delay 1 gi√¢y ƒë·ªÉ ƒë·∫£m b·∫£o video ƒë√£ load
    };

    // C√°c s·ª± ki·ªán user interaction ƒë·ªÉ enable audio autoplay
    const events = ['click', 'touchstart', 'keydown', 'mousedown'];
    
    events.forEach(event => {
      document.addEventListener(event, enableAudioAutoplay, { once: true });
    });

    return () => {
      events.forEach(event => {
        document.removeEventListener(event, enableAudioAutoplay);
      });
    };
  }, [hasVideoStarted]);

  // Auto unmute first video when audio is enabled
  useEffect(() => {
    if (audioEnabled && hasVideoStarted && isMuted) {
      const timer = setTimeout(() => {
        setIsMuted(false);
      }, 2000); // Delay 2 gi√¢y ƒë·ªÉ ƒë·∫£m b·∫£o video ƒë√£ load ho√†n to√†n
      
      return () => clearTimeout(timer);
    }
  }, [audioEnabled, hasVideoStarted, isMuted]);

  const faqs = useMemo(
    () => [
        {
          question: "B·ªØa ph·ª• ƒë√∫ng cho m·∫π b·∫ßu ti·ªÉu ƒë∆∞·ªùng thai k·ª≥?",
          answer:
            "‚Ä¢ Ch·ªçn th·ª±c ph·∫©m ch·ªâ s·ªë ƒë∆∞·ªùng huy·∫øt th·∫•p (GI th·∫•p)\n‚Ä¢ ∆Øu ti√™n gi√†u ch·∫•t x∆°, ƒë·∫°m v√† ch·∫•t b√©o t·ªët\n‚Ä¢ V√≠ d·ª•: s·ªØa chua kh√¥ng ƒë∆∞·ªùng + h·∫°t, ph√¥ mai + rau c·ªß, t√°o nh·ªè ƒÉn k√®m h·∫°nh nh√¢n\n‚Ä¢ ƒÇn ƒë√∫ng gi·ªù, c√°ch b·ªØa ch√≠nh √≠t nh·∫•t 2 gi·ªù\n‚Ä¢ Kh√¥ng ƒÉn qu√° tr·ªÖ hay qu√° nhi·ªÅu",
        image: "/images/tu-van-giang-noi-tiet.webp",
        video: "https://www.facebook.com/reel/920127953588405",
        icon: "üçé"

      },
        {
          question: "Khi n√†o c·∫ßn test ti·ªÉu ƒë∆∞·ªùng thai k·ª≥?",
          answer:
            "‚Ä¢ Ti·ªÉu ƒë∆∞·ªùng thai k·ª≥ th∆∞·ªùng kh√¥ng c√≥ tri·ªáu ch·ª©ng r√µ r√†ng\n‚Ä¢ Kh√¥ng kh√°t n∆∞·ªõc, kh√¥ng ti·ªÉu nhi·ªÅu, kh√¥ng m·ªát, kh√¥ng s·ªët\n‚Ä¢ ƒê∆∞·ªùng huy·∫øt v·∫´n c√≥ th·ªÉ tƒÉng √¢m th·∫ßm, khi·∫øn m·∫π b·∫ßu ch·ªß quan\n‚Ä¢ Khi ph√°t hi·ªán mu·ªôn: thai to, n∆∞·ªõc ·ªëi nhi·ªÅu, ti·ªÅm ·∫©n r·ªßi ro\n‚Ä¢ N√™n l√†m x√©t nghi·ªám s√†ng l·ªçc t·ª´ tu·∫ßn 24‚Äì28 ƒë·ªÉ k·ªãp th·ªùi ph√°t hi·ªán",
        image: "/images/tu-van-giang-noi-tiet.webp",
        video: "https://www.facebook.com/reel/1100106005486708",
        icon: "ü©∫"
      },
        {
          question: "C√°ch ƒÉn ƒë√∫ng cho m·∫π b·∫ßu ti·ªÉu ƒë∆∞·ªùng thai k·ª≥?",
          answer:
            "‚ùì B·ªã ti·ªÉu ƒë∆∞·ªùng thai k·ª≥ th√¨ ƒÉn u·ªëng th·∫ø n√†o?\nüëâ Nguy√™n t·∫Øc \"3 th·∫•p ‚Äì 1 ƒë·ªß\":\n\n‚Ä¢ Tinh b·ªôt th·∫•p: kh√¥ng c·∫Øt h·∫≥n m√† ch·ªçn lo·∫°i GI th·∫•p (g·∫°o l·ª©t, y·∫øn m·∫°ch, khoai lang‚Ä¶)\n‚Ä¢ ƒê∆∞·ªùng th·∫•p: b·ªè n∆∞·ªõc ng·ªçt, s·ªØa c√≥ ƒë∆∞·ªùng, tr√°i c√¢y ng·ªçt nhi·ªÅu (xo√†i ch√≠n, chu·ªëi ch√≠n‚Ä¶)\n‚Ä¢ Ch·∫•t b√©o x·∫•u th·∫•p: h·∫°n ch·∫ø ƒë·ªì chi√™n r√°n, m·ª° ƒë·ªông v·∫≠t\n‚Ä¢ ƒê·ªß dinh d∆∞·ª°ng: v·∫´n c·∫ßn ƒë·ªß ƒë·∫°m, rau xanh, vitamin, kho√°ng ch·∫•t ƒë·ªÉ nu√¥i m·∫π v√† b√©",
          image: "/images/tu-van-giang-noi-tiet.webp",
          video: "https://www.facebook.com/reel/1252179956611150",
        icon: "üìã"
      },
        {
          question: "Th·ª© t·ª± ƒÉn ƒë√∫ng cho m·∫π b·∫ßu ti·ªÉu ƒë∆∞·ªùng thai k·ª≥?",
          answer:
            "üëâ Kh√¥ng n√™n ƒÉn h·∫øt rau ‚Üí h·∫øt th·ªãt ‚Üí cu·ªëi c√πng m·ªõi ƒÉn tinh b·ªôt, v√¨ s·∫Ω l√†m ƒë∆∞·ªùng huy·∫øt sau 2 gi·ªù tƒÉng cao h∆°n sau 1 gi·ªù.\n\nüëâ Th·ª© t·ª± ƒë√∫ng: xem video",
          image: "/images/tu-van-giang-noi-tiet.webp",
          video: "https://www.facebook.com/reel/715262457921116",
        icon: "üçΩÔ∏è"
      },
      {
        question: "Ti·ªÉu ƒë∆∞·ªùng thai k√¨ ƒÉn bao nhi√™u c∆°m m·ªói b·ªØa l√† ƒë·ªß?",
        answer:
          "üëâ M·ªói b·ªØa ch√≠nh, m·∫π b·∫ßu n√™n ƒÉn kho·∫£ng ‚Öî b√°t c∆°m tr·∫Øng ho·∫∑c 1 b√°t c∆°m g·∫°o l·ª©t.\n\nüëâ ƒÇn k√®m ƒë·∫°m, rau xanh, ch·∫•t x∆°, kh√¥ng n√™n c·∫Øt b·ªè ho√†n to√†n tinh b·ªôt ƒë·ªÉ tr√°nh thi·∫øu nƒÉng l∆∞·ª£ng v√† nguy c∆° sinh x√™-t√¥n.",
          image: "/images/tu-van-giang-noi-tiet.webp",
          video: "https://www.facebook.com/reel/715262457921116",
        icon: "üçö"
      },
    
    ],
    []
  );

  const toggleFAQ = (index) => {
    setExpanded(expanded === index ? null : index);
    setSelectedMedia(index);
    
    // Reset video state khi chuy·ªÉn c√¢u h·ªèi
    if (selectedMedia !== index) {
      setIsVideoPlaying(false);
      setHasVideoStarted(false);
      setIsMuted(true); // Reset v·ªÅ muted khi chuy·ªÉn video
      
      // Enable autoplay v·ªõi user interaction
      handleVideoInteraction();
      
      // Auto start video khi chuy·ªÉn c√¢u h·ªèi m·ªõi
      setTimeout(() => {
        setHasVideoStarted(true);
        
        // N·∫øu audio ƒë√£ ƒë∆∞·ª£c enable, t·ª± ƒë·ªông unmute sau khi video load
        if (audioEnabled) {
          setTimeout(() => {
            setIsMuted(false);
          }, 1500); // Delay th√™m ƒë·ªÉ ƒë·∫£m b·∫£o iframe ƒë√£ load xong
        }
      }, 300);
    }
  };

  const toggleMute = () => {
    setIsMuted(!isMuted);
    if (isMuted) {
      // Khi unmute, ƒë·∫£m b·∫£o audio context ƒë∆∞·ª£c k√≠ch ho·∫°t
      handleVideoInteraction();
    }
  };

  const toggleVideo = () => {
    setIsVideoPlaying(!isVideoPlaying);
  };

  const currentFaq = faqs[selectedMedia];

  return (
    <section className="py-16  relative overflow-hidden">
      {/* Background decorative elements */}
      <div className="absolute bottom-0 right-0 w-96 h-96 bg-gradient-to-br from-teal-100/20 to-emerald-100/20 rounded-full blur-3xl translate-x-48 translate-y-48"></div>
      
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 relative">
        {/* Header */}
        <div className="text-center mb-12">
          <div className="flex justify-center mb-6">
            <div className="inline-flex items-center gap-3 bg-white/70 backdrop-blur-sm px-4 py-2 rounded-full ring-1 ring-teal-200/50 shadow-sm">
              <div className="w-2 h-2 bg-teal-500 rounded-full animate-pulse"></div>
              <span className="text-teal-700 font-medium">Gi·∫£i ƒê√°p Th·∫Øc M·∫Øc</span>
              <div className="w-2 h-2 bg-teal-500 rounded-full animate-pulse delay-500"></div>
            </div>
          </div>
          <p className="text-[1.8rem] md:text-4xl font-bold md:mb-4 mb-2">
            <span className="bg-clip-text text-transparent bg-gradient-to-r from-teal-700 via-emerald-600 to-teal-600">
              H·ªèi ƒê√°p Ti·ªÉu ƒê∆∞·ªùng Thai K·ª≥
            </span>
          </p>
          <div className="w-16 h-1 bg-gradient-to-r from-teal-600 to-emerald-600 mx-auto md:mb-4 mb-2 rounded-full"></div>
          <p className="text-lg text-slate-600/90 max-w-4xl mx-auto">
            T√¨m hi·ªÉu c√°c th√¥ng tin c·∫ßn thi·∫øt ƒë·ªÉ ki·ªÉm so√°t ti·ªÉu ƒë∆∞·ªùng thai k·ª≥, ƒë·∫£m b·∫£o s·ª©c kh·ªèe cho m·∫π v√† b√©
          </p>
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-3 gap-8 items-start">
          {/* FAQ Section */}
          <div className="space-y-3 lg:col-span-2">
            {faqs.map((faq, index) => (
              <div
                key={index}
                className={`group rounded-2xl overflow-hidden transition-all duration-300 ${
                  selectedMedia === index
                    ? "bg-gradient-to-br from-teal-50 to-emerald-50 ring-2 ring-teal-200 shadow-lg"
                    : "bg-white/80 backdrop-blur-sm ring-1 ring-white/40 shadow-md hover:shadow-lg"
                }`}
              >
                <button
                  className="w-full p-4 lg:p-5 text-left transition-all duration-300 hover:bg-white/50"
                  onClick={() => toggleFAQ(index)}
                  aria-expanded={expanded === index}
                  aria-controls={`faq-answer-${index}`}
                >
                  <div className="flex items-center justify-between">
                    <div className="flex items-center gap-3">
                      <span className="text-xl lg:text-2xl">{faq.icon}</span>
                      <h3 className={`font-semibold text-sm lg:text-base transition-colors duration-300 ${
                        selectedMedia === index ? "text-teal-700" : "text-slate-700"
                      }`}>
                        {faq.question}
                      </h3>
                    </div>
                    <ChevronDown className={`w-4 h-4 lg:w-5 lg:h-5 transition-all duration-300 ${
                      expanded === index ? "rotate-180" : ""
                    } ${selectedMedia === index ? "text-teal-600" : "text-slate-400"}`} />
                  </div>
                </button>
                
                 {/* Mobile Video Overlay - kh√¥ng l√†m thay ƒë·ªïi layout */}
                 {expanded === index && (
                   <div 
                     className="lg:hidden fixed inset-0 bg-black/50 backdrop-blur-sm z-50 flex items-center justify-center p-4 animate-fadeInDown"
                     onClick={(e) => {
                       // ƒê√≥ng video khi click v√†o backdrop (kh√¥ng ph·∫£i video container)
                       if (e.target === e.currentTarget) {
                         setExpanded(null);
                       }
                     }}
                   >
                     {/* Video container */}
                     <div className="relative max-w-xs mx-auto w-full">
                       <div className="relative rounded-2xl overflow-hidden bg-white/90 backdrop-blur-sm shadow-2xl">
                         <div className="relative aspect-[9/16]">
                           <iframe
                             src={`https://www.facebook.com/plugins/video.php?href=${encodeURIComponent(faq.video)}&show_text=false&autoplay=true&muted=${isMuted}&playsinline=true&controls=true&width=280&height=498`}
                             width="100%"
                             height="100%"
                             style={{ border: 'none', overflow: 'hidden' }}
                             scrolling="no"
                             frameBorder="0"
                             allowFullScreen={true}
                             allow="autoplay; clipboard-write; encrypted-media; picture-in-picture; web-share; microphone; camera; fullscreen"
                             className="rounded-2xl"
                             key={`mobile-${index}-${isMuted}`}
                           />
                           
                           {/* Close Button Overlay - thay th·∫ø n√∫t mute */}
                           <button
                             onClick={() => setExpanded(null)}
                             className="absolute top-3 right-3 w-8 h-8 bg-white/90 backdrop-blur-sm rounded-full flex items-center justify-center text-gray-700 hover:bg-white transition-all duration-300 shadow-lg z-10 hover:scale-110"
                             title="ƒê√≥ng video"
                           >
                             <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                               <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                             </svg>
                           </button>
                         </div>
                       </div>
                      
                       {/* Facebook Button - Mobile */}
                       <div className="mt-4 flex justify-center">
                         <a
                           href={faq.video}
                           target="_blank"
                           rel="noopener noreferrer"
                           className="group inline-flex items-center gap-3 bg-gradient-to-r from-blue-600 to-blue-700 text-white px-6 py-3 rounded-full shadow-lg hover:shadow-xl transition-all duration-300 font-semibold text-sm hover:scale-105"
                         >
                           <div className="relative">
                             <div className="w-6 h-6 bg-white rounded-full flex items-center justify-center">
                               <svg className="w-4 h-4 text-blue-600" fill="currentColor" viewBox="0 0 24 24">
                                 <path d="M24 12.073c0-6.627-5.373-12-12-12s-12 5.373-12 12c0 5.99 4.388 10.954 10.125 11.854v-8.385H7.078v-3.47h3.047V9.43c0-3.007 1.792-4.669 4.533-4.669 1.312 0 2.686.235 2.686.235v2.953H15.83c-1.491 0-1.956.925-1.956 1.874v2.25h3.328l-.532 3.47h-2.796v8.385C19.612 23.027 24 18.062 24 12.073z"/>
                               </svg>
                             </div>
                             <div className="absolute -top-1 -right-1 w-2 h-2 bg-green-500 rounded-full animate-pulse"></div>
                           </div>
                           <span>Xem tr√™n Facebook</span>
                           <ExternalLink className="w-4 h-4 group-hover:translate-x-1 transition-transform duration-300" />
                         </a>
                       </div>
                     </div>
                   </div>
                 )}
                
                <div className={`overflow-hidden transition-all duration-300 ${
                  expanded === index ? "max-h-64 lg:max-h-48 opacity-100" : "max-h-0 opacity-0"
                }`}>
                  <div className="px-4 lg:px-5 pb-4 lg:pb-5">
                    <div className="border-t border-slate-200/50 pt-3 lg:pt-4">
                      <div className="text-slate-600 text-sm lg:text-base leading-relaxed">
                        {faq.answer.split('\n').map((line, lineIndex) => (
                          <p key={lineIndex} className="mb-1 last:mb-0">
                            {line}
                          </p>
                        ))}
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            ))}
          </div>

           {/* Media Section - Desktop Only */}
           <div className="relative w-fit mx-auto lg:mx-0 hidden lg:block lg:col-span-1">
             <div className="relative rounded-xl overflow-hidden shadow-xl">
               {hasVideoStarted ? (
                 <div className="relative aspect-[9/16] w-64">
                   <iframe
                     src={`https://www.facebook.com/plugins/video.php?href=${encodeURIComponent(currentFaq.video)}&show_text=false&autoplay=true&muted=${isMuted}&playsinline=true&controls=true&width=256&height=455`}
                     width="100%"
                     height="100%"
                     style={{ border: 'none', overflow: 'hidden' }}
                     scrolling="no"
                     frameBorder="0"
                     allowFullScreen={true}
                     allow="autoplay; clipboard-write; encrypted-media; picture-in-picture; web-share; microphone; camera; fullscreen"
                     className="rounded-xl"
                     key={`desktop-${selectedMedia}-${isMuted}`} // Force reload khi muted state thay ƒë·ªïi
                   />
                 </div>
               ) : (
                 <div className="relative aspect-[9/16] w-64 cursor-pointer" onClick={() => {
                   handleVideoInteraction();
                   setHasVideoStarted(true);
                 }}>
                   <Image
                     src={currentFaq.image}
                     alt={currentFaq.question}
                     fill
                     className="object-cover"
                   />
                   <div className="absolute inset-0 bg-gradient-to-t from-black/30 via-transparent to-transparent"></div>
                   
                   {/* Play button overlay */}
                   <div className="absolute inset-0 flex items-center justify-center">
                     <div className="w-16 h-16 bg-blue-600/90 backdrop-blur-sm rounded-full flex items-center justify-center shadow-lg hover:bg-blue-700/90 transition-colors duration-200">
                       <svg className="w-6 h-6 text-white ml-1" fill="currentColor" viewBox="0 0 24 24">
                         <path d="M8 5v14l11-7z"/>
                       </svg>
                     </div>
                   </div>
                   
                   {/* Topic indicator */}
                   <div className="absolute bottom-3 left-3 right-3">
                     <div className="bg-white/90 backdrop-blur-sm rounded-lg p-3 shadow-md">
                       <div className="flex items-center gap-2">
                         <span className="text-lg">{currentFaq.icon}</span>
                         <p className="text-xs text-slate-700 font-medium line-clamp-2">{currentFaq.question}</p>
                       </div>
                     </div>
                   </div>
                 </div>
               )}
             </div>


            {/* Facebook Button */}
            <div className="mt-2">
              <a
                href={currentFaq.video}
                target="_blank"
                rel="noopener noreferrer"
                className="group inline-flex items-center gap-1.5 w-64 justify-center bg-gradient-to-r from-blue-600 to-blue-700 text-white px-2 py-2 rounded-lg shadow-md hover:shadow-lg transition-all duration-300 transform hover:-translate-y-0.5 font-medium text-base"
              >
                <div className="relative">
                  <div className="w-4 h-4 bg-white rounded-full flex items-center justify-center">
                    <svg className="w-2.5 h-2.5 text-blue-600" fill="currentColor" viewBox="0 0 24 24">
                      <path d="M24 12.073c0-6.627-5.373-12-12-12s-12 5.373-12 12c0 5.99 4.388 10.954 10.125 11.854v-8.385H7.078v-3.47h3.047V9.43c0-3.007 1.792-4.669 4.533-4.669 1.312 0 2.686.235 2.686.235v2.953H15.83c-1.491 0-1.956.925-1.956 1.874v2.25h3.328l-.532 3.47h-2.796v8.385C19.612 23.027 24 18.062 24 12.073z"/>
                    </svg>
                  </div>
                  <div className="absolute -top-0.5 -right-0.5 w-1.5 h-1.5 bg-green-500 rounded-full animate-pulse"></div>
                </div>
                <span>Video Facebook </span>
                <ExternalLink className="w-3 h-3" />
              </a>
            </div>
          </div>
        </div>
      </div>
    </section>
  );
};

export default FAQComponent;